@model WebApp.Models.ViewModels.VariantDetailVM
<div class="content-header clearfix">
    <h1 class="float-left">
        Variant details
        <small>
            <i class="fas fa-arrow-circle-left"></i>
            <a href="/Product/Attributes?s=0">back to variant list</a>
        </small>
    </h1>
    <div class="float-right">
        <input type="button" value="Save" class="btn btn-primary" id="SaveProduct">
    </div>
</div>

<div class="validation-summary-valid" data-valmsg-summary="true">
    <ul>
        <li style="display:none"></li>
    </ul>
</div>
<div class="row text-center">
    <div class="col-10">
        <span id="GroupinfoErr" class="d-none"></span>
    </div>
</div>
<div class="form-horizontal">
    <div class="card">
        <div class="card-header with-border clearfix">
            <div class="card-title">
                <i class="fas fa-info"></i>Variant details
            </div>
            <div class="card-tools float-right">
                <button class="btn btn-tool" data-card-widget="collapse" type="button">
                    <i class="fa toggle-icon fa-minus"></i>
                </button>
            </div>
        </div>
        <div class="card-body attrCombination">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label>Title</label>
                        <input id="Titles" class="form-control" value="@Model.variantDetailsByAttributes.Title" />
                    </div>
                    <div class="form-group">
                        <label>Price</label>
                        <input id="MRP" class="form-control" value="@Model.variantDetailsByAttributes.MRP" />
                    </div>
                    <div class="form-group">
                        <label>Selling Cost</label>
                        <input id="SellingCost" class="form-control" value="@Model.variantDetailsByAttributes.SellingCost" />
                    </div>
                    <div class="form-group">
                        <label>HSN</label>
                        <input id="HSN" class="form-control" value="@Model.variantDetailsByAttributes.HSN" />
                    </div> <input id="Quantity" type="hidden" class="form-control" value="@Model.variantDetailsByAttributes.Quantity" />
                    <div class="form-group">
                        <label>GTIN</label>
                        <input id="GTIN" class="form-control" value="@Model.variantDetailsByAttributes.GTIN" />
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-sm-4 input-group">
                                <div class="input-group-prepend" style="height: 38px;">
                                    <div class="input-group-text">
                                        <input type="checkbox" name="IsFeatured" id="IsFeatured" class="mt-0" @Html.Raw(Model.variantDetailsByAttributes.IsFeatured ? "checked='checked'" : "")>
                                    </div>
                                </div>
                                <label class="form-control" for="IsFeatured">IsFeatured</label>
                            </div>

                            <div class="col-sm-4 input-group">
                                <div class="input-group-prepend" style="height: 38px;">
                                    <div class="input-group-text">
                                        <input type="checkbox" name="IsFeatured" id="IsShowOnHome" class="mt-0" @Html.Raw(Model.variantDetailsByAttributes.IsShowOnHome ? "checked='checked'" : "")>
                                    </div>
                                </div>
                                <label class="form-control" for="IsShowOnHome">IsShowOnHome</label>
                            </div>

                            <div class="col-sm-4 input-group">
                                <div class="input-group-prepend" style="height: 38px;">
                                    <div class="input-group-text">
                                        <input type="checkbox" name="IsFeatured" id="IsPublished" class="mt-0" @Html.Raw(Model.variantDetailsByAttributes.IsPublished ? "checked='checked'" : "")>
                                    </div>
                                </div>
                                <label class="form-control" for="IsPublished">IsPublished</label>
                            </div>
                        </div>
                    </div>
                    @*<button type="button" class="btn btn-sm btn-info btnAddNewAttribute mb-2 float-right" onclick="AddNewAttribute('@Model.variantDetailsByAttributes.Id')">Add Attribute</button>*@
                    @{
                        string color = "";
                        try
                        {
                            color = Model.PictureInformation.ToList().FirstOrDefault().Color;
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                    <input type="hidden" id="hdGroupId" value="MainAttrGrid" />
                    <div class="form-group" id="MainAttrGrid">
                        <button type="button" class="btn btn-sm btn-info btnAddNewAttribute mb-2 float-right">Add Attribute</button>
                        <table class="table table-bordered attributeGrid" id="attributeGrid">
                            <thead>
                                <tr role="row">
                                    <th>#</th>
                                    <th>Attribute Name</th>
                                    <th>Attribute Value</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Attributes.Any())
                                {
                                    int counter = 0;
                                    foreach (var item in Model.Attributes)
                                    {
                                        counter++;
                                        <tr data-attr-Id="@item.AttributeId" data-attr-Name="@item.AttributeName" data-attr-value="@item.AttributeValue">
                                            <td>@counter</td>
                                            <td>@item.AttributeName</td>
                                            <td>@item.AttributeValue</td>
                                            <td><span class="btn btn-danger rmRow"><i class="fa fa-times"></i><span></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <button type="button" class="btn btn-sm btn-info btnAddNewImage mb-2 float-right" onclick="AddNewimage('@Model.variantDetailsByAttributes.Id','@color','@Model.variantDetailsByAttributes.Title')">Upload Image</button>
                    <div class="form-group">
                        <table class="table table-bordered pictureGrid" id="Grid">
                            <thead>
                                <tr role="row">
                                    <th>#</th>
                                    <th>Picture</th>
                                    <th>Display Order</th>
                                    <th>Alt</th>
                                    <th>Title</th>
                                    <th>Color</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.PictureInformation.Any())
                                {
                                    int counter = 0;
                                    foreach (var item in Model.PictureInformation)
                                    {
                                        counter++;
                                        <tr data-group-id="@item.GroupId" data-alt-value="@item.Alt" data-title-value="@item.Title" data-display-value="@item.DisplayOrder" data-color-value="@item.Color">
                                            <td>@counter</td>
                                            <td><img src="@item.ImagePath" alt="@item.Alt" style="width:100px" class="img-fluid" /></td>
                                            <td>@item.DisplayOrder</td>
                                            <td>@item.Alt</td>
                                            <td>@item.Title</td>
                                            <td>@item.Color</td>
                                            <td><span class="btn btn-danger rmImage"><i class="fa fa-times"> </i><span></span></span></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script>
        variantImages = [];
        var imgArray = JSON.parse('@Html.Raw(Json.Serialize(Model.PictureInformation))');
        imgArray.forEach(function (arrayItem) {
            let imgParams = {
                Alt: arrayItem.alt,
                Title: arrayItem.title,
                DisplayOrder: arrayItem.displayOrder,
                AttrColor: arrayItem.color,
                GroupId: arrayItem.groupId
            };
            fetch(arrayItem.imagePath)
                .then(async response => {
                    const contentType = response.headers.get('content-type')
                    const blob = await response.blob()
                    const file = new File([blob], 'myFile.jpg', { contentType })
                    imgParams.File = file;
                });
            variantImages.push(imgParams);
        });
        $(document).on('click', '.addQuantity', (e) => {
            const remark = $('#txtRemark').val();
            const vId = $(e.currentTarget).data()?.variantid ?? 0;
            const am = $(e.currentTarget).data()?.addminus ?? 0;
            const currentQty = $('#txtaddDelete').val();
            if (currentQty == '') {
                Q.notify(-1, 'Minimum 1 Quantity Required.!');
                $('#txtaddDelete').focus();
                return;
            }
            if (am == 1 && remark == '') {
                Q.notify(-1, 'Remark Required.!');
                $('#txtRemark').focus();
                return;
            }
            $.post('/Product/VariantQuantityUpdate', { v: vId, q: currentQty, IsReduce: am == 0 ? false : true, Remark: remark }).done(function (result) {
                Q.notify(result.statusCode, result.responseText);
                (result.statusCode == 1)
                {
                    // loadData();
                    location.reload();
                }
            }).fail(function (xhr) {
                console.log(xhr.responseText);
                Q.notify(-1, 'something went wrong.');
            })
        });
        var AddNewimage = function (VarId, color, Alt) {
            $.post('/Product/UploadVariantImage', { VariantId: VarId, VariantColor: color, ImgAlt: Alt }).done((result) => {
                Q.alert({
                    title: 'Upload Variant Image',
                    body: result,
                    width: 900
                });
            }).fail(function (xhr) {
                console.log(xhr.responseText);
                alert('something went wrong');
            })
        }
        $(document).on('click', '.btnAddNewAttribute', e => {
            let combinationId = $(e.currentTarget).parents('.attrCombination').attr('id')
            let __top = $(e.currentTarget).offset().top - 100;
            $.post('/Product/AddAttributes', { combinationId, CategoryId: '@Model.variantDetailsByAttributes.CategoryId' }).done((result) => {
                Q.alert({
                    title: 'Add Attribute',
                    body: result,
                    width: 900,
                    top: __top
                });
            })
        })
        $(document).on('click', '.rmRow', (e) => {
            let data = $(e.currentTarget).closest('tr').data();
            if (data) {
                let param = {
                    AttributeId: data.attrId,
                    AttributeText: data.attrValue,
                    AttributeName: data.attrName
                };
                $(e.currentTarget).closest('tr').remove();
                if (param.AttributeName == "color") {
                    let _colors = selectedColors();
                    if (!_colors.includes(param.AttributeText)) {
                        $(`#attrColor option[value="${param.AttributeText}"]`).remove();
                    }
                }
                if ($('#attrColor option').length <= 0) {
                    let _option = `<option value="Default" data-group-id="1">Default</option>`;
                    $('#attrColor').append(_option);
                }
            }
        });
        $('.rmImage').unbind().click(e => {
            let _ele = $(e.currentTarget).closest('tr');
            let __index = _ele.index();
            variantImages.splice(__index, 1);
            _ele.remove();
        });
        $(document).on('click', '#AddProductImg', () => {
            let __files = $('#PictureFile')[0].files;
            let totalFiles = __files.length;
            for (let i = 0; i < totalFiles; i++) {

                //HightWidthValidatio
                var k = 0;
                var _URL = window.URL || window.webkitURL;
                var file, img;
                if ((file = __files[i])) {
                    img = new Image();
                    img.onload = function () {
                        if (this.width < 400 || this.height < 400) {
                            Q.notify(-1, 'Image width must be 400 and above and height must be 400 and above');
                            $('.pictureGrid').find('tr:last').remove();
                            variantImages.splice(-1);
                            return false;
                        }
                    };
                    img.src = _URL.createObjectURL(file);
                }
                //HightWidthValidatio
                let param = {
                    File: __files[i],
                    //File: $('#PictureFile')[0].files[0],
                    Alt: $('#Alt').val(),
                    Title: $('#Title').val(),
                    DisplayOrder: $('#DisplayOrder').val(),
                    AttrColor: $("#attrColor option:selected").text(),
                    GroupId: $("#attrColor option:selected").data()?.groupId
                };
                if (!param.File || !param.Alt || !param.Title || !param.DisplayOrder || !param.AttrColor) {
                    Q.notify(-1, 'All Image fileds are required');
                    return false;
                }


                let pictureGrid = $(`.pictureGrid`);
                let count = pictureGrid.find('tr').length;
                variantImages.push(param);
                let _src = URL.createObjectURL(param.File);
                let _html = `<tr data-group-Id="${param.GroupId}" data-alt-value="${param.Alt}" data-title-value="${param.Title}" data-display-value="${param.DisplayOrder}" data-color-value="${param.AttrColor}">
                           <td>${count}</td>
                           <td><img src="${_src}" alt="image" style="width:100px"/></td>
                           <td>${param.DisplayOrder}</td>
                           <td>${param.Alt}</td>
                           <td>${param.Title}</td>
                           <td>${param.AttrColor}</td>
                           <td><span class="btn btn-danger rmImage" ><i class="fa fa-times"> </i><span></td>
                      </tr>`;
                pictureGrid.append(_html);
                Q.notify(1, 'Image Added Successfully');
                $('.rmImage').unbind().click(e => {
                    let _ele = $(e.currentTarget).closest('tr');
                    let __index = _ele.index();
                    variantImages.splice(__index, 1);
                    _ele.remove();
                });
            }
        });

    </script>
    <script>
        const isPartOfArray = (a, b) => {
            a = a.sort();
            b = b.sort();
            return a.join().includes(b.join())
        };
        const selectedColors = () => {
            let colorList = [];
            $('.attributeGrid').each(function () {
                colorList.push($(this).find('[data-attr-name="color"]').data()?.attrValue)
            })
            return colorList;
        }
        $(document).on('click', '#SaveProduct', () => {
            let groupInfo = [];
            let attrInfo = [];
            let pictureInfo = [];
            let valCount = 0;
            $('.attrCombination').each(function (i) {
                let groupId = i + 1;
                let currentGroup = $(this);
                let attributes = currentGroup.find('.attributeGrid tr').each(function (j) {
                    let cAttr = $(this).data();
                    let cAttrs = $(this).closest('.attributeGrid');
                    if (!$.isEmptyObject(cAttr)) {
                        let attributes = {
                            Id: j,
                            AttributeId: cAttr.attrId,
                            AttributeValue: cAttr.attrValue,
                            GroupId: groupId
                        };
                        attrInfo.push(attributes);
                    }

                });
                var returnindays = currentGroup.find('[name="ReturnInDays"]').val();
                var warranty = currentGroup.find('[name="Warranty"]').val();
                var warrantyUnit = currentGroup.find('[name="WarrantyUnit"]').val();
                let groupDetail = {
                    Id: '@Model.variantDetailsByAttributes.Id',
                    HSN: $('#HSN').val(),
                    MRP: $('#MRP').val(),
                    Quantity: $('#Quantity').val(),
                    GTIN: $('#GTIN').val(),
                    Title: $('#Titles').val(),
                    SellingCost: $('#SellingCost').val(),
                    IsFeatured: $('#IsFeatured').is(':checked') ? 1 : 0,
                    IsShowOnHome: $('#IsShowOnHome').is(':checked') ? 1 : 0,
                    IsPublished: $('#IsPublished').is(':checked') ? 1 : 0
                };
                groupInfo.push(groupDetail);
            });
            $('.pictureGrid tbody tr').each(function (i) {
                let pictureGroup = $(this).data();
                let pic = {
                    Alt: pictureGroup.altValue,
                    Title: pictureGroup.titleValue,
                    DisplayOrder: pictureGroup.displayValue,
                    AttrColor: pictureGroup.colorValue,
                    GroupId: pictureGroup.groupId
                };
                pictureInfo.push(pic);
            });

            if (!isPartOfArray(pictureInfo.map(x => x.AttrColor), selectedColors())) {
                Q.notify(-1, 'Some Images of selected colores are missing.');
                return false;
            }

            let param = {
                ProductId: parseInt('@Model.variantDetailsByAttributes.ProductId'),
                AttributeInfo: attrInfo,
                GroupInfo: groupInfo,
                PictureInfo: pictureInfo
            };
            formData = new FormData();
            for (let i = 0; i < variantImages.length; i++) {
                formData.append(`req[${i}].file`, variantImages[i].File);
                formData.append(`req[${i}].Color`, variantImages[i].AttrColor);
                formData.append(`req[${i}].GroupId`, variantImages[i].GroupId);
                formData.append(`req[${i}].DisplayOrder`, variantImages[i].DisplayOrder);
                formData.append(`req[${i}].Title`, variantImages[i].Title);
                formData.append(`req[${i}].Alt`, variantImages[i].Alt);
            }
            formData.append('jsonObj', JSON.stringify(param));

            $.ajax({
                url: '/Product/UpdateVariants',
                data: formData,
                processData: false,
                contentType: false,
                type: 'POST',
                success: function (response) {
                    Q.notify(response.statusCode, response.responseText)
                },
                error: function (xhr) {
                    Q.notify(-1, xhr.responseText)
                },
            });
        })
    </script>
}